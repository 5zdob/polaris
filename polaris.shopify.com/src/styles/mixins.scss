@import './variables.scss';

@mixin dark-mode {
  :global(.dark-mode) & {
    @content;
  }
}

@mixin custom-scrollbars {
  &::-webkit-scrollbar {
    width: 3px;
  }

  &::-webkit-scrollbar-track {
    background-color: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background: transparent;
    border-radius: var(--border-radius-round);
  }

  &:hover {
    &::-webkit-scrollbar-thumb {
      background-color: var(--border-color);
    }

    &::-webkit-scrollbar-thumb:hover {
      background-color: var(--text-subdued);
    }
  }
}

@function is-map($var) {
  @return type-of($var) == 'map';
}

@function is-null($var) {
  @return type-of($var) == 'null';
}

// NOTE: Order is important here; will search backwards through this list to
// find fallback values
$breakpointKeys: ('xs', 'sm', 'md', 'lg', 'xl');

@function find-default-with-fallback($default, $breakpoint) {
  $initialIndex: index($breakpointKeys, $breakpoint);

  // If the given '$breakpoint' doesn't exist, just return null
  @if is-null($initialIndex) {
    @return null;
  }

  // Search backwards until a non-null value is found in the $defaults map
  // NOTE: Arrays in SASS are 1-based, so we're iterating down to AND INCLUDING
  // index "1" (the first element).
  @for $index from $initialIndex through 1 {
    $value: map-get($default, nth($breakpointKeys, $index));
    @if not is-null($value) {
      @return $value;
    }
  }

  // Couldn't find a non-null default, so return null
  @return null;
}

@function get-default($declarationProp, $default: null, $key: null) {
  $value: null;
  @if is-map($default) {
    @if not is-null($key) {
      $value: find-default-with-fallback($default, $key);
    }
  } @else {
    $value: $default;
  }
  @if not is-null($value) {
    @return $value;
  }

  // Most CSS properties' W3C spec defaults are 'initial', but some (like color)
  // default to different values (like 'inherit'). To match our consumer's
  // expectations of how styling works, those properties should have their
  // default passed in as `inherit`.
  //
  // To calculate which ones are inherited:
  // var css = require("@webref/css")
  // const parsedFiles = await css.listAll();
  // const inherited = [];
  // for (const data of Object.values(parsedFiles)) {
  //   inherited.push(...data.properties.filter(prop => prop.inherited === 'yes').map(prop => prop.name));
  // }
  // console.log(inherited);
  @return 'initial';
}

@mixin scope-custom-property(
  $componentName,
  $componentProp,
  $responsively: false
) {
  @if $responsively {
    // stylelint-disable -- Polaris component custom properties
    --pc-#{$componentName}-#{$componentProp}-xs: initial;
    --pc-#{$componentName}-#{$componentProp}-sm: initial;
    --pc-#{$componentName}-#{$componentProp}-md: initial;
    --pc-#{$componentName}-#{$componentProp}-lg: initial;
    --pc-#{$componentName}-#{$componentProp}-xl: initial;
  } @else {
    --pc-#{$componentName}-#{$componentProp}: initial;
  }
}

@mixin responsive-props(
  $componentName,
  $componentProp,
  $declarationProp,
  $default: null
) {
  @include scope-custom-property($componentName, $componentProp, true);

  #{$declarationProp}: var(
    --pc-#{$componentName}-#{$componentProp}-xs,
    #{get-default($declarationProp, $default, 'xs')}
  );

  @media screen and (min-width: #{$breakpointTablet}) {
    #{$declarationProp}: var(
      --pc-#{$componentName}-#{$componentProp}-sm,
      var(
        --pc-#{$componentName}-#{$componentProp}-xs,
        #{get-default($declarationProp, $default, 'sm')}
      )
    );
  }

  @media screen and (min-width: #{$breakpointDesktopSmall}) {
    #{$declarationProp}: var(
      --pc-#{$componentName}-#{$componentProp}-md,
      var(
        --pc-#{$componentName}-#{$componentProp}-sm,
        var(
          --pc-#{$componentName}-#{$componentProp}-xs,
          #{get-default($declarationProp, $default, 'md')}
        )
      )
    );
  }

  @media screen and (min-width: #{$breakpointDesktop}) {
    #{$declarationProp}: var(
      --pc-#{$componentName}-#{$componentProp}-lg,
      var(
        --pc-#{$componentName}-#{$componentProp}-md,
        var(
          --pc-#{$componentName}-#{$componentProp}-sm,
          var(
            --pc-#{$componentName}-#{$componentProp}-xs,
            #{get-default($declarationProp, $default, 'lg')}
          )
        )
      )
    );
  }

  @media screen and (min-width: #{$breakpointDesktopLarge}) {
    #{$declarationProp}: var(
      --pc-#{$componentName}-#{$componentProp}-xl,
      var(
        --pc-#{$componentName}-#{$componentProp}-lg,
        var(
          --pc-#{$componentName}-#{$componentProp}-md,
          var(
            --pc-#{$componentName}-#{$componentProp}-sm,
            var(
              --pc-#{$componentName}-#{$componentProp}-xs,
              #{get-default($declarationProp, $default, 'xl')}
            )
          )
        )
      )
    );
  }
  // stylelint-enable
}
