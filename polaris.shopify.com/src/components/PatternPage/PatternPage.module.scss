@import '../../styles/variables.scss';
@import '../../styles/mixins.scss';
@import '../../styles/fonts.scss';

.Heading {
  align-items: center;
}

.InfoLine {
  color: var(--text-subdued);
  .InfoLineLink {
    color: inherit;
    text-decoration: underline;
    &:hover {
      color: var(--text-link);
    }
  }
}

.HowItHelps {
  & > img {
    display: block;
    border: 1px solid var(--p-color-border-subdued);
    aspect-ratio: 361.9/180.9;
    border-radius: 0.25rem;
    background: var(--p-color-bg-inset);
  }
  ol {
    --counter-offset: calc(24px + var(--p-space-2));
    list-style: none;
    counter-reset: item;
    li {
      counter-increment: item;
      padding-left: var(--counter-offset);
      &::before {
        width: 24px;
        height: 24px;
        position: absolute;
        margin-left: calc(-1 * var(--counter-offset));
        content: counter(item);
        font-weight: 700;
        color: rgba(153, 35, 247, 1);
        text-align: center;
      }
    }
  }
  @media screen and (max-width: $breakpointTablet) {
    flex-direction: column;
    .ImageWrapper {
      min-width: 100%;
    }
  }
}

.UsefulToKnow {
  img {
    background: var(--p-color-bg-inset);
    border-radius: var(--border-radius-400);
    border: 1px solid #c9cccf;
  }
}

.Accordion {
  padding: 1rem 2rem;
  border: 1px solid black;
}

.Checkbox {
  appearance: auto;
}

.DefinitionTable {
  --props-table-border-color: #c9cccf;
  --props-table-heading-background: rgba(0, 0, 0, 0.02);
  --props-table-content-background: inherit;
  @include dark-mode {
    --props-table-border-color: rgba(55, 55, 55, 1);
    --props-table-heading-background: rgba(30, 30, 35, 1);
    --props-table-content-background: rgba(22, 22, 25, 1);
  }
  border: 1px solid var(--props-table-border-color);
  border-radius: var(--border-radius-400);
  background: var(--props-table-content-background);

  h1,
  h2,
  h3,
  h4,
  h5 {
    background: var(--props-table-heading-background);
    color: var(--text-strong);
    padding: 0.66rem 1rem;
    margin: 0;
    font-size: inherit;
    font-weight: normal;
  }

  .DefinitionList {
    display: grid;
    dt {
      color: var(--text-strong);
    }

    border-top: 1px solid var(--props-table-border-color);
    grid-template-columns: fit-content(35%) 1fr;
    padding: 1rem;
    gap: 1rem;
    @media screen and (max-width: $breakpointDesktopSmall) {
      grid-template-columns: 1fr;
    }
    @media screen and (max-width: $breakpointTablet) {
      grid-template-columns: fit-content(30%) 1fr;
    }
    @media screen and (max-width: $breakpointMobile) {
      grid-template-columns: 1fr;
    }
  }
}

.List {
  list-style: none;
  margin: 0;
  position: relative;
  li {
    /* Using before elements as they respond to layout unlike ::marker, so we
    * can wrap the li's in a <Stack> and use the gap property */
    &::before {
      width: 24px;
      height: 24px;
      font-weight: 700;
      text-align: center;
      flex-shrink: 0;
    }
  }
}

.UnorderedList {
  li {
    &::before {
      content: '\2022';
      padding-right: 0.95em;
    }
  }
}

.OrderedList {
  counter-reset: item;
  li {
    counter-increment: item;
    &::before {
      content: counter(item);
      color: rgba(153, 35, 247, 1);
    }
  }
}
